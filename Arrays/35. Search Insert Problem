35. Search Insert Problem

Problem
=======

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 
Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4

 

My Solution
===========

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        if target <= nums[0]:
            return 0
        
        for i, n in enumerate(nums[:-1]):
            if n == target:
                return i
            elif n < target and nums[i+1] > target:
                return i + 1
        
        return len(nums) if nums[-1] < target else len(nums)-1


Improved
=========

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        """
        1 - Binary search 
        2 - Binary search to find the largest element less than the item
        """

        lo, hi = 0, len(nums) - 1
        res = -1
        while lo <= hi:
            mid = (lo + hi) // 2

            if nums[mid] <= target:
                if nums[mid] == target:
                    return mid
                else:
                    res = mid
                    lo = mid + 1
            else:
                hi = mid - 1
        
        return res + 1

